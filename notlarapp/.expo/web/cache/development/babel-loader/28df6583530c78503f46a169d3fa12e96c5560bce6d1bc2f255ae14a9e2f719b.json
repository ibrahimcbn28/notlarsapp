{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { createNote } from \"../services/api\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useTheme } from \"../context/ThemeContext\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CreateNoteScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    title = _useState2[0],\n    setTitle = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    content = _useState4[0],\n    setContent = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var handleSave = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (!title.trim() || !content.trim()) {\n        Alert.alert('Uyarı', 'Başlık ve içerik alanları zorunludur.');\n        return;\n      }\n      try {\n        setLoading(true);\n        var userData = yield AsyncStorage.getItem('user');\n        var user = JSON.parse(userData);\n        yield createNote({\n          title: title.trim(),\n          content: content.trim()\n        }, user.id);\n        navigation.goBack();\n      } catch (error) {\n        console.error('Not oluşturulurken hata:', error);\n        Alert.alert('Hata', 'Not oluşturulurken bir hata oluştu.');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleSave() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: [styles.container, {\n      backgroundColor: colors.background\n    }],\n    children: [_jsxs(ScrollView, {\n      style: styles.scrollView,\n      children: [_jsx(TextInput, {\n        style: [styles.input, {\n          backgroundColor: colors.surface,\n          color: colors.text,\n          borderColor: colors.border\n        }],\n        placeholder: \"Not Ba\\u015Fl\\u0131\\u011F\\u0131\",\n        placeholderTextColor: colors.textSecondary,\n        value: title,\n        onChangeText: setTitle,\n        maxLength: 100,\n        editable: !loading\n      }), _jsx(TextInput, {\n        style: [styles.contentInput, {\n          backgroundColor: colors.surface,\n          color: colors.text,\n          borderColor: colors.border\n        }],\n        placeholder: \"Not \\u0130\\xE7eri\\u011Fi\",\n        placeholderTextColor: colors.textSecondary,\n        value: content,\n        onChangeText: setContent,\n        multiline: true,\n        textAlignVertical: \"top\",\n        editable: !loading\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: [styles.saveButton, {\n        backgroundColor: colors.primary\n      }, loading && {\n        opacity: 0.7\n      }],\n      onPress: handleSave,\n      disabled: loading,\n      children: loading ? _jsx(ActivityIndicator, {\n        color: colors.background\n      }) : _jsx(Text, {\n        style: [styles.saveButtonText, {\n          color: colors.background\n        }],\n        children: \"Kaydet\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scrollView: {\n    flex: 1,\n    padding: 16\n  },\n  input: {\n    height: 50,\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: 15,\n    fontSize: 16,\n    marginBottom: 15\n  },\n  contentInput: {\n    height: 300,\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: 15,\n    paddingTop: 15,\n    fontSize: 16,\n    marginBottom: 15\n  },\n  saveButton: {\n    margin: 16,\n    height: 50,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","StyleSheet","TouchableOpacity","ScrollView","Alert","ActivityIndicator","createNote","AsyncStorage","useTheme","jsx","_jsx","jsxs","_jsxs","CreateNoteScreen","_ref","navigation","_useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","content","setContent","_useState5","_useState6","loading","setLoading","_useTheme","colors","handleSave","_ref2","_asyncToGenerator","trim","alert","userData","getItem","user","JSON","parse","id","goBack","error","console","apply","arguments","style","styles","container","backgroundColor","background","children","scrollView","input","surface","color","text","borderColor","border","placeholder","placeholderTextColor","textSecondary","value","onChangeText","maxLength","editable","contentInput","multiline","textAlignVertical","saveButton","primary","opacity","onPress","disabled","saveButtonText","create","flex","padding","height","borderWidth","borderRadius","paddingHorizontal","fontSize","marginBottom","paddingTop","margin","justifyContent","alignItems","fontWeight"],"sources":["C:/Users/Windows/OneDrive/Masaüstü/notlarapp/src/screens/CreateNoteScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    View,\r\n    Text,\r\n    TextInput,\r\n    StyleSheet,\r\n    TouchableOpacity,\r\n    ScrollView,\r\n    Alert,\r\n    ActivityIndicator,\r\n} from 'react-native';\r\nimport { createNote } from '../services/api';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useTheme } from '../context/ThemeContext';\r\n\r\nexport default function CreateNoteScreen({ navigation }) {\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const { colors } = useTheme();\r\n\r\n    const handleSave = async () => {\r\n        if (!title.trim() || !content.trim()) {\r\n            Alert.alert('Uyarı', 'Başlık ve içerik alanları zorunludur.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setLoading(true);\r\n            const userData = await AsyncStorage.getItem('user');\r\n            const user = JSON.parse(userData);\r\n\r\n            await createNote({\r\n                title: title.trim(),\r\n                content: content.trim(),\r\n            }, user.id);\r\n\r\n            navigation.goBack();\r\n        } catch (error) {\r\n            console.error('Not oluşturulurken hata:', error);\r\n            Alert.alert('Hata', 'Not oluşturulurken bir hata oluştu.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={[styles.container, { backgroundColor: colors.background }]}>\r\n            <ScrollView style={styles.scrollView}>\r\n                <TextInput\r\n                    style={[styles.input, {\r\n                        backgroundColor: colors.surface,\r\n                        color: colors.text,\r\n                        borderColor: colors.border\r\n                    }]}\r\n                    placeholder=\"Not Başlığı\"\r\n                    placeholderTextColor={colors.textSecondary}\r\n                    value={title}\r\n                    onChangeText={setTitle}\r\n                    maxLength={100}\r\n                    editable={!loading}\r\n                />\r\n\r\n                <TextInput\r\n                    style={[styles.contentInput, {\r\n                        backgroundColor: colors.surface,\r\n                        color: colors.text,\r\n                        borderColor: colors.border\r\n                    }]}\r\n                    placeholder=\"Not İçeriği\"\r\n                    placeholderTextColor={colors.textSecondary}\r\n                    value={content}\r\n                    onChangeText={setContent}\r\n                    multiline\r\n                    textAlignVertical=\"top\"\r\n                    editable={!loading}\r\n                />\r\n            </ScrollView>\r\n\r\n            <TouchableOpacity\r\n                style={[\r\n                    styles.saveButton,\r\n                    { backgroundColor: colors.primary },\r\n                    loading && { opacity: 0.7 }\r\n                ]}\r\n                onPress={handleSave}\r\n                disabled={loading}\r\n            >\r\n                {loading ? (\r\n                    <ActivityIndicator color={colors.background} />\r\n                ) : (\r\n                    <Text style={[styles.saveButtonText, { color: colors.background }]}>\r\n                        Kaydet\r\n                    </Text>\r\n                )}\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    scrollView: {\r\n        flex: 1,\r\n        padding: 16,\r\n    },\r\n    input: {\r\n        height: 50,\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n        paddingHorizontal: 15,\r\n        fontSize: 16,\r\n        marginBottom: 15,\r\n    },\r\n    contentInput: {\r\n        height: 300,\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n        paddingHorizontal: 15,\r\n        paddingTop: 15,\r\n        fontSize: 16,\r\n        marginBottom: 15,\r\n    },\r\n    saveButton: {\r\n        margin: 16,\r\n        height: 50,\r\n        borderRadius: 10,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    saveButtonText: {\r\n        fontSize: 16,\r\n        fontWeight: '600',\r\n    },\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}